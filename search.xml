<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test中</title>
    <url>/2021/07/31/git_about/</url>
    <content><![CDATA[<h5 id="二、用户"><a href="#二、用户" class="headerlink" title="二、用户"></a>二、用户</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 配置所有 Git 仓库的 用户名 和 email </span></span><br><span class="line"><span class="variable">$ </span>git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.email <span class="string">&quot;youremail@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 配置当前 Git 仓库的 用户名 和 email</span></span><br><span class="line"><span class="variable">$ </span>git config user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"><span class="variable">$ </span>git config user.email <span class="string">&quot;youremail@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看全局配置的 用户名 和 email </span></span><br><span class="line"><span class="variable">$ </span>git config --global user.name     查看用户名</span><br><span class="line"><span class="variable">$ </span>git config --global user.email     查看邮箱地址</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看当前仓库配置的 用户名 和 email </span></span><br><span class="line"><span class="variable">$ </span>git config user.name     查看用户名</span><br><span class="line"><span class="variable">$ </span>git config user.email     查看邮箱地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git 是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址</span></span><br><span class="line"><span class="comment"># git config 命令的 --global 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址(不加 --global)。</span></span><br></pre></td></tr></table></figure>

<h5 id="三、相关命令"><a href="#三、相关命令" class="headerlink" title="三、相关命令"></a>三、相关命令</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">(所有命令都在 Git Bash 中运行)</span><br><span class="line"><span class="variable">$ </span>git                           查看 git 的相关命令 (git --help)</span><br><span class="line"><span class="variable">$ </span>git --version                 查看 git 的版本</span><br><span class="line"><span class="variable">$ </span>git config                    查看 git config 的相关命令</span><br><span class="line"><span class="variable">$ </span>git pull origin develop       从远程(origin) 的 develop 分支拉取代码</span><br></pre></td></tr></table></figure>

<h6 id="1-初始化本地仓库-在-Git-Bash-中输入对应的命令"><a href="#1-初始化本地仓库-在-Git-Bash-中输入对应的命令" class="headerlink" title="1. 初始化本地仓库: 在 Git Bash 中输入对应的命令"></a>1. 初始化本地仓库: 在 <em>Git Bash</em> 中输入对应的命令</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">注: 下面所有的命令使用的时候不用拷贝最前面的 <span class="variable">$ </span>符号</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>cd <span class="symbol">d:</span></span><br><span class="line"><span class="variable">$ </span>mkdir learngit</span><br><span class="line"><span class="variable">$ </span>cd learngit</span><br><span class="line"><span class="variable">$ </span>pwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd: change directory 改变目录</span></span><br><span class="line"><span class="comment"># mkdir  创建目录</span></span><br><span class="line"><span class="comment"># pwd    用于显示当前目录</span></span><br><span class="line">注意: 为避免遇到各种奇怪的问题,确保目录名 (包括父目录) 不含中文</span><br></pre></td></tr></table></figure>



<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不想要 git 管理跟踪的文件,可以在仓库根目录添加 .gitignore 文件,在里面写对应的规则</span></span><br><span class="line"><span class="variable">$ </span>git init              把当前目录初始化为 git 仓库</span><br><span class="line"><span class="variable">$ </span>ls -ah                查看当前目录下的文件,包含隐藏文件 (不带 -ah 看不了隐藏文件)</span><br></pre></td></tr></table></figure>

<h6 id="2-添加文件到仓库"><a href="#2-添加文件到仓库" class="headerlink" title="2. 添加文件到仓库"></a>2. 添加文件到仓库</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">add</span> &lt;file&gt;              如: git <span class="keyword">add</span> readme.txt</span><br><span class="line">$ git commit -m <span class="string">&quot;description&quot;</span>     如: git commit -m <span class="string">&quot;add readme.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加文件到仓库分两步:</span></span><br><span class="line"><span class="meta"># 1. add 添加该文件到仓库, </span></span><br><span class="line"><span class="meta"># 添加许多同种类型的文件,可以使用通配符 * (记得加引号)  如: git add &quot;*.txt&quot;  命令就是添加所有 .txt 文件</span></span><br><span class="line"><span class="meta"># 2. commit 提交该文件到仓库, description 为你对该次提交的描述说明, </span></span><br><span class="line">注意: 可以多次 <span class="keyword">add</span> 不同的文件,commit 可以一次提交多个文件</span><br></pre></td></tr></table></figure>

<h6 id="3-查看仓库目前状态-项目是否有修改、添加、未追踪的文件等"><a href="#3-查看仓库目前状态-项目是否有修改、添加、未追踪的文件等" class="headerlink" title="3. 查看仓库目前状态 (项目是否有修改、添加、未追踪的文件等)"></a>3. 查看仓库目前状态 (项目是否有修改、添加、未追踪的文件等)</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git status</span><br></pre></td></tr></table></figure>

<h6 id="4-查看修改内容-查看文件不同-difference"><a href="#4-查看修改内容-查看文件不同-difference" class="headerlink" title="4. 查看修改内容,查看文件不同 (difference)"></a>4. 查看修改内容,查看文件不同 (difference)</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git diff </span><br><span class="line"><span class="variable">$ </span>git diff &lt;file&gt;                </span><br><span class="line"><span class="variable">$ </span>git diff --cached</span><br><span class="line"><span class="variable">$ </span>git diff HEAD -- &lt;file&gt;</span><br><span class="line"><span class="comment"># git diff 查看工作区(work dict)和暂存区(stage)的区别</span></span><br><span class="line"><span class="comment"># git diff --cached 查看暂存区(stage)和分支(master)的区别</span></span><br><span class="line"><span class="comment"># git diff HEAD -- &lt;file&gt; 查看工作区和版本库里面最新版本的区别</span></span><br><span class="line">如: git diff readme.txt  表示查看 readme.txt 修改了什么,有什么不同</span><br></pre></td></tr></table></figure>

<h6 id="5-查看提交日志"><a href="#5-查看提交日志" class="headerlink" title="5. 查看提交日志"></a>5. 查看提交日志</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline     <span class="comment">#美化输出信息,每个记录显示为一行,显示 commit_id 前几位数</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline     <span class="comment">#美化输出信息,每个记录显示为一行,显示完整的 commit_id</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&#x27;%h -%d %s (%cr)&#x27;</span> --abbrev-commit --</span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示从最近到最远的提交日志</span></span><br><span class="line"><span class="comment"># 日志输出一大串类似 3628164...882e1e0 的是commit_id (版本号),和 SVN 不一样，Git 的commit_id 不是 1，2，3…… 递增的数字，而是一个 SHA1 计算出来的一个非常大的数字，用十六进制表示, 因为 Git 是分布式的版本控制系统，当多人在同一个版本库里工作，如果大家都用 1，2，3……作为版本号，那肯定就冲突了</span></span><br><span class="line"><span class="comment"># 最后一个会打印出提交的时间等, (HEAD -&gt; master)指向的是当前的版本</span></span><br><span class="line"><span class="comment"># 退出查看 log 日志,输入字母 q (英文状态)</span></span><br></pre></td></tr></table></figure>

<h6 id="6-版本回退"><a href="#6-版本回退" class="headerlink" title="6. 版本回退"></a>6. 版本回退</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git reset --hard HEAD^</span><br><span class="line"><span class="variable">$ </span>git reset --hard &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD    表示当前版本，也就是最新的提交</span></span><br><span class="line"><span class="comment"># HEAD^   上一个版本</span></span><br><span class="line"><span class="comment"># HEAD^^  上上一个版本</span></span><br><span class="line"><span class="comment"># HEAD~100   往上100个版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到 commit_id 对应的那个版本,commit_id 为版本号,只需要前几位就行</span></span><br></pre></td></tr></table></figure>

<h6 id="7-查看命令历史-用于版本切换"><a href="#7-查看命令历史-用于版本切换" class="headerlink" title="7. 查看命令历史 (用于版本切换)"></a>7. 查看命令历史 (用于版本切换)</h6><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line"># 假如我们依次提交了三个版本 a-&gt;b-&gt;c,然后昨天我们从版本 c 回退到了版本 b,今天我们又想要回到版本 c,此时就可以使用 reflog 命令来查找 c 版本的 commit_id,然后使用 reset 命令来进行版本回退</span><br></pre></td></tr></table></figure>

<h6 id="8-撤销修改"><a href="#8-撤销修改" class="headerlink" title="8. 撤销修改"></a>8. 撤销修改</h6><h6 id="丢弃工作区-Working-Directory-的修改"><a href="#丢弃工作区-Working-Directory-的修改" class="headerlink" title="- 丢弃工作区 (Working Directory) 的修改"></a>- 丢弃工作区 (Working Directory) 的修改</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git restore &lt;file&gt;  (建议使用) (如: git restore readme.txt)</span><br><span class="line"><span class="variable">$ </span>git checkout -- &lt;file&gt;</span><br><span class="line"><span class="comment"># 命令中 -- 很重要，没有就变成 “切换到另一个分支” 的命令</span></span><br></pre></td></tr></table></figure>

<h6 id="丢弃暂存区-stage-index-的修改"><a href="#丢弃暂存区-stage-index-的修改" class="headerlink" title="- 丢弃暂存区 (stage/index) 的修改"></a>- 丢弃暂存区 (stage/index) 的修改</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步: 把暂存区的修改撤销掉(unstage)，重新放回工作区</span></span><br><span class="line"><span class="variable">$ </span>git restore --staged &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步: 撤销工作区的修改</span></span><br><span class="line"><span class="variable">$ </span>git restore &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h6 id="小结"><a href="#小结" class="headerlink" title="- 小结"></a>- 小结</h6><blockquote>
<ul>
<li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git restore &lt;file&gt;</code>。</li>
<li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git restore --staged &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li>
<li>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考 <em>版本回退</em> 一节，不过前提是没有推送到远程库。</li>
</ul>
</blockquote>
<h6 id="9-删除文件"><a href="#9-删除文件" class="headerlink" title="9. 删除文件"></a>9. 删除文件</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ git rm <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># git rm <span class="tag">&lt;<span class="name">file</span>&gt;</span> 相当于执行</span><br><span class="line">- rm <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">- git add &lt;file</span><br></pre></td></tr></table></figure>

<h6 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &lt;file&gt;    显示文件内容,如: cat readme.txt 就是在 git bash 中显示该文件内容</span><br><span class="line">$ <span class="built_in">cd</span> ~         进入用户主目录</span><br><span class="line">$ open ~/.ssh  Mac 打开存放 ssh 文件夹</span><br></pre></td></tr></table></figure>

<h5 id="四、相关名词理解"><a href="#四、相关名词理解" class="headerlink" title="四、相关名词理解 :"></a>四、相关名词理解 :</h5><h6 id="1-工作区-Working-Directory-自己电脑里能看到的目录"><a href="#1-工作区-Working-Directory-自己电脑里能看到的目录" class="headerlink" title="1. 工作区 (Working Directory): 自己电脑里能看到的目录"></a>1. 工作区 (Working Directory): 自己电脑里能看到的目录</h6><h6 id="2-版本库-Repository-工作区有一个隐藏目录-git，这个不算工作区，而是-Git-的版本库"><a href="#2-版本库-Repository-工作区有一个隐藏目录-git，这个不算工作区，而是-Git-的版本库" class="headerlink" title="2. 版本库 (Repository): 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库"></a>2. 版本库 (Repository): 工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库</h6><blockquote>
<p>Git 的版本库里存了很多东西，其中最重要的就是称为 stage（或者叫index）的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD</p>
</blockquote>
<h5 id="五、远程仓库"><a href="#五、远程仓库" class="headerlink" title="五、远程仓库 :"></a>五、远程仓库 :</h5><h6 id="1-创建-SSH-Key"><a href="#1-创建-SSH-Key" class="headerlink" title="1. 创建 SSH Key"></a>1. <a href="https://links.jianshu.com/go?to=https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent%23generating-a-new-ssh-key">创建 SSH Key</a></h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br><span class="line"><span class="comment"># 邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key</p>
</blockquote>
<blockquote>
<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p>
</blockquote>
<h6 id="2-登录-GitHub-在-Settings-中找到-SSH-设置项中添加新的-SSH-Key-设置任意-title-在-Key-文本框里粘贴-id-rsa-pub-文件的内容"><a href="#2-登录-GitHub-在-Settings-中找到-SSH-设置项中添加新的-SSH-Key-设置任意-title-在-Key-文本框里粘贴-id-rsa-pub-文件的内容" class="headerlink" title="2. 登录 GitHub ,在 Settings 中找到 SSH 设置项中添加新的 SSH Key,设置任意 title,在 Key 文本框里粘贴 id_rsa.pub 文件的内容"></a>2. 登录 GitHub ,在 Settings 中找到 SSH 设置项中添加新的 SSH Key,设置任意 title,在 Key 文本框里粘贴 id_rsa.pub 文件的内容</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制Key用这种方式复制</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ cat id_rsa.pub</span><br><span class="line"></span><br><span class="line">$ open ~/.ssh   (Mac 下打开存放 Github 生成的 ssh Key 文件夹)</span><br><span class="line"></span><br><span class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub  Mac 下拷贝生成的公钥内容</span><br></pre></td></tr></table></figure>

<h6 id="3-关联远程仓库-先有本地仓库"><a href="#3-关联远程仓库-先有本地仓库" class="headerlink" title="3. 关联远程仓库 (先有本地仓库)"></a>3. 关联远程仓库 (先有本地仓库)</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@github</span>.<span class="symbol">com:</span>renyuns/learngit.git</span><br><span class="line"><span class="comment"># 后面的地址换成自己的 GitHub 仓库地址</span></span><br></pre></td></tr></table></figure>

<h6 id="4-推送到远程仓库"><a href="#4-推送到远程仓库" class="headerlink" title="4. 推送到远程仓库"></a>4. 推送到远程仓库</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git remote       查看远程库信息</span><br><span class="line"><span class="variable">$ </span>git remote -v    查看远程库详细信息</span><br><span class="line"><span class="variable">$ </span>git remote rm origin  删除已关联的远程库 origin</span><br><span class="line"><span class="variable">$ </span>git push -u origin master    <span class="comment">#第一次推送</span></span><br><span class="line"><span class="variable">$ </span>git push origin master      推送本地 master 分支到远程库</span><br><span class="line"><span class="variable">$ </span>git push origin dev         推送本地 dev 分支到远程库</span><br><span class="line"><span class="comment">#  除了第一次推送,不需要添加 -u 参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个本地库关联多个远程库,例如同时关联 GitHub 和 Gitee:</span></span><br><span class="line"><span class="comment"># 1. 先关联GitHub的远程库：(注意:远程库的名称叫 github，不叫 origin)</span></span><br><span class="line"><span class="variable">$ </span>git remote add github git<span class="variable">@github</span>.<span class="symbol">com:</span>renyun/learngit1.git</span><br><span class="line"><span class="comment"># 2. 再关联Gitee的远程库：(注意:远程库的名称叫 gitee，不叫 origin)</span></span><br><span class="line"><span class="variable">$ </span>git remote add gitee git<span class="variable">@gitee</span>.<span class="symbol">com:</span>renyun/learngit1.git</span><br><span class="line"><span class="comment"># 3. 推送到远程库</span></span><br><span class="line"><span class="variable">$ </span>git push github master</span><br><span class="line"><span class="variable">$ </span>git push gitee master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加上了-u参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的master分支关联起来</p>
</blockquote>
<h6 id="5-从远程仓库克隆-先有远程库"><a href="#5-从远程仓库克隆-先有远程库" class="headerlink" title="5. 从远程仓库克隆 (先有远程库)"></a>5. 从远程仓库克隆 (先有远程库)</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone git<span class="variable">@github</span>.<span class="symbol">com:</span>renyuns/gitskills.git</span><br><span class="line"><span class="comment"># GitHub 支持多种协议,上面是 ssh 协议,还有 https 协议</span></span><br></pre></td></tr></table></figure>

<h5 id="六、分支"><a href="#六、分支" class="headerlink" title="六、分支"></a>六、分支</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git branch       查看分支列表及当前分支</span><br><span class="line"><span class="variable">$ </span>git branch dev   创建 dev 分支</span><br><span class="line"><span class="variable">$ </span>git switch dev   切换到 dev 分支  (git checkout dev)</span><br><span class="line"><span class="variable">$ </span>git switch -c dev   创建并切换到新的 dev 分支  (git checkout -b dev)</span><br><span class="line"><span class="variable">$ </span>git switch -c dev origin/dev  创建远程 origin 的 dev 分支到本地并切换到该分支</span><br><span class="line"><span class="variable">$ </span>git branch -d dev   删除 dev 分支</span><br><span class="line"><span class="variable">$ </span>git branch -D dev   强制删除 dev 分支</span><br><span class="line"><span class="variable">$ </span>git merge dev       合并 dev 分支到当前分支 (当有冲突的时候,需要先解决冲突)</span><br><span class="line"><span class="variable">$ </span>git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev  合并 dev 分支到当前分支(禁用Fast forward 合并策略)</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git pull  拉取远程分支最新的内容</span><br><span class="line"><span class="variable">$ </span>git branch --set-upstream-to=origin/dev dev  指定本地 dev 分支与远程 origin/dev 分支的链接</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去</span></span><br><span class="line"><span class="comment"># 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git log --graph  查看分支合并图</span><br><span class="line"><span class="variable">$ </span>git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git stash  保存当前工作区和暂存区的修改状态,切换到其他分支修复 bug 等工作,然后在回来继续工作</span><br><span class="line"><span class="variable">$ </span>git stash list  查看保存现场的列表</span><br><span class="line"><span class="variable">$ </span>git stash pop   恢复的同时把 stash 内容也删除</span><br><span class="line"><span class="variable">$ </span>git stash apply  恢复现场，stash内容并不删除</span><br><span class="line"><span class="variable">$ </span>git stash drop   删除 stash 内容</span><br><span class="line"><span class="variable">$ </span>git stash apply stash@&#123;<span class="number">0</span>&#125;  多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash</span><br><span class="line"><span class="comment"># 通常在 dev 分支开发时,需要有紧急 bug 需要马上处理,保存现在修改的文件等,先修复 bug 后再回来继续工作的情况</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git cherry-pick &lt;commit&gt; 复制一个特定的提交到当前分支(当前分支的内容需要先 commit,然后冲突的文件需要解决冲突,然后 commit)</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git rebase  把本地未push的分叉提交历史整理成直线(使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比)</span><br></pre></td></tr></table></figure>

<h5 id="七、标签"><a href="#七、标签" class="headerlink" title="七、标签"></a>七、标签</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到对应的分支 branch 上,查看或者操作对应的标签 tag </span></span><br><span class="line"><span class="variable">$ </span>git tag  查看所有的标签</span><br><span class="line"><span class="variable">$ </span>git tag &lt;tagname&gt;  打标签(默认标签是打在最新提交的commit上) 如: git tag v1.<span class="number">0</span></span><br><span class="line"><span class="variable">$ </span>git tag &lt;tagname&gt; &lt;commit_id&gt;  给对应的 commit_id 打标签</span><br><span class="line"><span class="variable">$ </span>git tag -a &lt;tagname&gt; -m <span class="string">&quot;标签说明信息&quot;</span> &lt;commit_id&gt; 创建带有说明的标签，用-a指定标签名，-m指定说明文字</span><br><span class="line"><span class="variable">$ </span>git tag -d &lt;tagname&gt; 删除一个本地标签</span><br><span class="line"><span class="variable">$ </span>git push origin <span class="symbol">:refs/tags/&lt;tagname&gt;</span>可以删除一个远程标签</span><br><span class="line"><span class="variable">$ </span>git show &lt;tagname&gt;  查看标签信息</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git push origin &lt;tagname&gt;  推送一个本地标签到远程</span><br><span class="line"><span class="variable">$ </span>git push origin --tags     一次性推送全部尚未推送到远程的本地标签</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签,需要先删除本地标签,然后在删除远程标签,如:删除标签 v0.9</span></span><br><span class="line"><span class="variable">$ </span>git tag -d v0.<span class="number">9</span></span><br><span class="line"><span class="variable">$ </span>git push origin <span class="symbol">:refs/tags/v0</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>



<p>作者：枫_d646<br>链接：<a href="https://www.jianshu.com/p/36342812cd3a">https://www.jianshu.com/p/36342812cd3a</a><br>来源：简书</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>imagetest</title>
    <url>/2021/07/31/imagetest/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/hugochen1024/p/12570656.html">lianjie </a></p>
<p><img src="/2021/07/31/imagetest/QQ%E5%9B%BE%E7%89%8720181224151304.jpg" alt="QQ图片20181224151304"></p>
<img src="/2021/07/31/imagetest/QQ图片20200302113211.png" alt="QQ图片20200302113211" style="zoom: 25%;">

<p><strong>输出</strong></p>
<p>csdx</p>
<h2 id="测试csdn链接图片"><a href="#测试csdn链接图片" class="headerlink" title="测试csdn链接图片"></a>测试csdn链接图片</h2><p><img src="https://img-blog.csdnimg.cn/3bc4cc8ba79f45a395b4b214553047b6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzU0MTk2,size_16,color_FFFFFF,t_70" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>test中</title>
    <url>/2021/07/30/test/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><span id="more"></span>
<p>文本136156515</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h2 id="目录2？"><a href="#目录2？" class="headerlink" title="目录2？"></a>目录2？</h2><p>df<br>sddddddddddd<br><a href="http://www.baidu.com/">百度</a><br><img src="/2021/07/30/test/Myblog\source_posts\QQ截图20200507165838.png" alt="sf"></p>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
